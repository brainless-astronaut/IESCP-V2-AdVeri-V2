What error is this? How to solve?

error:
127.0.0.1 - - [11/Nov/2024 18:27:10] "GET /sponsor-requests HTTP/1.1" 500 -
Traceback (most recent call last):
  File "/mnt/c/aaaa/.venv/lib/python3.12/site-packages/flask/app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/c/aaaa/.venv/lib/python3.12/site-packages/flask/app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/c/aaaa/.venv/lib/python3.12/site-packages/flask_restful/__init__.py", line 298, in error_router
    return original_handler(e)
           ^^^^^^^^^^^^^^^^^^^
  File "/mnt/c/aaaa/.venv/lib/python3.12/site-packages/flask_restful/__init__.py", line 298, in error_router
    return original_handler(e)
           ^^^^^^^^^^^^^^^^^^^
  File "/mnt/c/aaaa/.venv/lib/python3.12/site-packages/flask_restful/__init__.py", line 298, in error_router
    return original_handler(e)
           ^^^^^^^^^^^^^^^^^^^
  [Previous line repeated 1 more time]
  File "/mnt/c/aaaa/.venv/lib/python3.12/site-packages/flask_cors/extension.py", line 194, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
                                                ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/c/aaaa/.venv/lib/python3.12/site-packages/flask_restful/__init__.py", line 295, in error_router
    return self.handle_error(e)
           ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/c/aaaa/.venv/lib/python3.12/site-packages/flask_restful/__init__.py", line 310, in handle_error
    _handle_flask_propagate_exceptions_config(current_app, e)
  File "/mnt/c/aaaa/.venv/lib/python3.12/site-packages/flask/app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/c/aaaa/.venv/lib/python3.12/site-packages/flask/app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/c/aaaa/.venv/lib/python3.12/site-packages/flask_restful/__init__.py", line 298, in error_router
    return original_handler(e)
           ^^^^^^^^^^^^^^^^^^^
  File "/mnt/c/aaaa/.venv/lib/python3.12/site-packages/flask_restful/__init__.py", line 298, in error_router
    return original_handler(e)
           ^^^^^^^^^^^^^^^^^^^
  File "/mnt/c/aaaa/.venv/lib/python3.12/site-packages/flask_restful/__init__.py", line 298, in error_router
    return original_handler(e)
           ^^^^^^^^^^^^^^^^^^^
  [Previous line repeated 1 more time]
  File "/mnt/c/aaaa/.venv/lib/python3.12/site-packages/flask_cors/extension.py", line 194, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
                                                ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/c/aaaa/.venv/lib/python3.12/site-packages/flask_restful/__init__.py", line 295, in error_router
    return self.handle_error(e)
           ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/c/aaaa/.venv/lib/python3.12/site-packages/flask_restful/__init__.py", line 310, in handle_error
    _handle_flask_propagate_exceptions_config(current_app, e)
  File "/mnt/c/aaaa/.venv/lib/python3.12/site-packages/flask/app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/c/aaaa/.venv/lib/python3.12/site-packages/flask/app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/c/aaaa/.venv/lib/python3.12/site-packages/flask_restful/__init__.py", line 493, in wrapper
    return self.make_response(data, code, headers=headers)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/c/aaaa/.venv/lib/python3.12/site-packages/flask_restful/__init__.py", line 522, in make_response
    resp = self.representations[mediatype](data, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/c/aaaa/.venv/lib/python3.12/site-packages/flask_restful/representations/json.py", line 21, in output_json
    dumped = dumps(data, **settings) + "\n"
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/__init__.py", line 238, in dumps
    **kw).encode(obj)
          ^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 202, in encode
    chunks = list(chunks)
             ^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 439, in _iterencode
    o = _default(o)
        ^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 180, in default
    raise TypeError(f'Object of type {o.__class__.__name__} '
TypeError: Object of type function is not JSON serializable

backend:

class SponsorRequests(Resource):

    @jwt_required
    def get(self):
        try:
            current_user = get_jwt_identity()
            your_campaigns = Campaigns.query.filter_by(sponsor_id=current_user['user_id']).all()

            return {
                'current_user': current_user,
                'your_campaigns': [campaign.to_dict() for campaign in your_campaigns]
            }
        except Exception as e:
            print(f"Error: {e}")  # This will help you see what's going wrong in the backend
            return make_response(jsonify({'message': str(e)}), 500)

    @jwt_required
    def post(self, campaign_id):
        current_user = get_jwt_identity()
        try:
            data = request.get_json()
            new_request = AdRequests(
                camapign_id = campaign_id,
                influencer_id = data.get('influencer_id'),
                sponsor_id = current_user['user_id'],
                initiator ='sponsor',   
                requirements = data.get('requirements'),
                payment_amount = data.get('payment_amount'),
                messages = data.get('messages')
            )
            db.session.add(new_request)
            db.session.commit()
            return make_response(jsonify({'message': 'Request sent successfully'}), 201)

        except Exception as e:
            db.session.rollback()
            return make_response(jsonify({'message': f'Error occured while sending request. {str(e)}'}))

    @jwt_required
    def put(self, request_id):
        try:
            current_user = get_jwt_identity()

            request = AdRequests.query.get(request_id)

            if not request: 
                return make_response(jsonify({'message': 'Request does not exists.'}))

            if request.influencer_id!= current_user['user_id']: 
                return make_response(jsonify({'message': 'You are not authorized to update this request.'}))

            data = request.get_json()
            action = data.get('action')
            if action == 'update':
                request.requirements = data.get('requirements')
                request.payment_amount = data.get('payment_amount')
                request.messages = data.get('messages')
            elif  action == 'negotiate':
                request.negotiation_amount = data.get('negotiation_amount')
                request.status = 'negotiation'
            elif  action == 'accept':
                request.status = 'accepted'
            elif action == 'rejected': 
                request.status = 'rejected'
        

            db.session.commit()
            return make_response(jsonify({'message': 'Request action performed successfully'}), 200)
        except Exception as e:
            db.session.rollback()
            return make_response(jsonify({'message': f'Error while updating request. {str(e)}'}), 500)

    @jwt_required
    def delete(self, request_id):
        try:
            current_user = get_jwt_identity()

            request = AdRequests.query.get(request_id)

            if not request: 
                return make_response(jsonify({'message': 'Request does not exists.'}))

            if request.influencer_id!= current_user['user_id']: 
                return make_response(jsonify({'message': 'You are not authorized to delete this request.'}))

            db.session.delete(request)
            db.session.commit()
        except Exception as e:
            db.session.rollback()
            return make_response(jsonify({'message': f'Error while deleting request. {str(e)}'}), 500)


frontend:

// frontend/pages/SponsorRequests.js

export default {
    data() {
        return {
            requests: [], // For storing requests data
            showCreatePopup: false, // Controls visibility of the Create Request popup
            showEditPopup: false, // Controls visibility of the Edit Request popup
            currentRequest: {}, // Stores request data for view/edit actions
            token: localStorage.getItem('accessToken'), // Assuming token is stored here
        };
    },
    created() {
        this.fetchRequests();
    },
    methods: {
        // Fetch requests for the current sponsor's campaigns
        async fetchRequests() {
            try {
                const response = await fetch(location.origin + '/sponsor-requests', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${this.token}`,
                    },
                });

                if (response.ok) {
                    const data = await response.json();
                    this.requests = data.requests;
                } else {
                    console.error("Error fetching requests:", await response.text());
                }
            } catch (error) {
                console.error("Error fetching requests:", error);
            }
        },

        // Open the Create Request Popup
        openCreatePopup() {
            this.showCreatePopup = true;
            this.currentRequest = {}; // Reset the form data
        },

        // Open the Edit Request Popup
        openEditPopup(request) {
            this.currentRequest = { ...request }; // Clone request data
            this.showEditPopup = true;
        },

        // Close the current popup
        closePopup() {
            this.showCreatePopup = false;
            this.showEditPopup = false;
        },

        // Create a new request
        async createRequest(requestData) {
            try {
                const response = await fetch(location.origin + '/sponsor-requests', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${this.token}`,
                    },
                    body: JSON.stringify(requestData)
                });

                if (response.ok) {
                    const data = await response.json();
                    alert(data.message);
                    this.fetchRequests();
                    this.closePopup();
                } else {
                    console.error("Error creating request:", await response.text());
                }
            } catch (error) {
                console.error("Error creating request:", error);
            }
        },

        // Edit the request
        async editRequest(requestData) {
            try {
                const response = await fetch(location.origin + `/sponsor-requests/${this.currentRequest.id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${this.token}`,
                    },
                    body: JSON.stringify(requestData)
                });

                if (response.ok) {
                    const data = await response.json();
                    alert(data.message);
                    this.fetchRequests();
                    this.closePopup();
                } else {
                    console.error("Error editing request:", await response.text());
                }
            } catch (error) {
                console.error("Error editing request:", error);
            }
        },

        // Delete the request
        async deleteRequest(requestId) {
            try {
                const response = await fetch(location.origin + `/sponsor-requests/${requestId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${this.token}`,
                    },
                });

                if (response.ok) {
                    const data = await response.json();
                    alert(data.message);
                    this.fetchRequests();
                } else {
                    console.error("Error deleting request:", await response.text());
                }
            } catch (error) {
                console.error("Error deleting request:", error);
            }
        }
    },
    template: `
        <div>
            <button @click="openCreatePopup" class="btn btn-primary">Create Request</button>

            <!-- Requests Table -->
            <table>
                <thead>
                    <tr>
                        <th>Request ID</th>
                        <th>Campaign ID</th>
                        <th>Influencer ID</th>
                        <th>Requirements</th>
                        <th>Payment Amount</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <tr v-for="request in requests" :key="request.id">
                        <td>{{ request.id }}</td>
                        <td>{{ request.campaign_id }}</td>
                        <td>{{ request.influencer_id }}</td>
                        <td>{{ request.requirements }}</td>
                        <td>{{ request.payment_amount }}</td>
                        <td>{{ request.status }}</td>
                        <td>
                            <button @click="openEditPopup(request)">Edit</button>
                            <button @click="deleteRequest(request.id)">Delete</button>
                        </td>
                    </tr>
                </tbody>
            </table>

            <!-- Create Request Popup -->
            <div v-if="showCreatePopup" class="popup">
                <div class="popup-content">
                    <h2>Create Request</h2>
                    <form @submit.prevent="createRequest(currentRequest)">
                        <input v-model="currentRequest.campaign_id" placeholder="Campaign ID" required>
                        <input v-model="currentRequest.influencer_id" placeholder="Influencer ID" required>
                        <textarea v-model="currentRequest.requirements" placeholder="Requirements" required></textarea>
                        <input v-model="currentRequest.payment_amount" type="number" placeholder="Payment Amount" required>
                        <textarea v-model="currentRequest.messages" placeholder="Messages"></textarea>
                        <button type="submit">Create</button>
                        <button @click="closePopup">Cancel</button>
                    </form>
                </div>
            </div>

            <!-- Edit Request Popup -->
            <div v-if="showEditPopup" class="popup">
                <div class="popup-content">
                    <h2>Edit Request</h2>
                    <form @submit.prevent="editRequest(currentRequest)">
                        <input v-model="currentRequest.campaign_id" placeholder="Campaign ID" required>
                        <input v-model="currentRequest.influencer_id" placeholder="Influencer ID" required>
                        <textarea v-model="currentRequest.requirements" placeholder="Requirements" required></textarea>
                        <input v-model="currentRequest.payment_amount" type="number" placeholder="Payment Amount" required>
                        <textarea v-model="currentRequest.messages" placeholder="Messages"></textarea>
                        <button type="submit">Save Changes</button>
                        <button @click="closePopup">Cancel</button>
                    </form>
                </div>
            </div>
        </div>
    `
};